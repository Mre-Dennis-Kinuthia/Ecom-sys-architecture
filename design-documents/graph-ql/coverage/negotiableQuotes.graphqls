type Mutation {
    createNegotiableQuote(
        cartId: ID! @doc(description: "Cart ID")
        quoteName: String! @doc(description: "Quote name")
        comment: String @doc(description: "Comment")
        files: [FileInput!] @doc(description: "Attached files")
    ): CreateNegotiableQuoteOutput! @doc(description:"Generates negotiable quote request")

    addNegotiableQuoteComments(
        cartId: ID! @doc(description: "Cart ID")
        comment: String @doc(description: "Comment")
        files: [FileInput!] @doc(description: "Attached files")
    ): AddNegotiableQuoteCommentsOutput! @doc(description:"Add comments to negotiable quote")

    updateNegotiableQuoteItemQuantity(
        cart_id: ID!, @doc(description: "unique Id of negotiable quote")
        item: ID!, @doc(description: "unique Id of Item to be update in negotiable quote")
        quantity: Float @doc(description: "quantity of the item  to be updated")
    ): UpdateNegotiableQuoteItemsQuantityOutput @doc(description: "Update items quantity in negotiable quote")

    removeNegotiableQuoteItems(
        cart_id: ID!, @doc(description: "unique Id of negotiable quote")
        items: [ID!]! @doc(description: "unique Ids of Items to be removed from negotiable quote")
    ): RemoveNegotiableQuoteItemsOutput @doc(description: "Remove Items in negotiable quote")

    setShippingAddressesOnNegotiableQuote(
        cart_id: ID!
        shipping_addresses: [NegotiableQuoteShippingAddressInput!]!
    ): SetShippingAddressesOnNegotiableQuoteOutput @doc(description: "Assign shipping address to Negotiable quote")

    setShippingMethodsOnNegotiableQuote(
        cartId: ID! @doc(description: "Cart ID")
        shippingMethods: [ShippingMethodInput]! @doc(description: "Input for shipping method")
    ): SetShippingMethodsOnNegotiableQuoteOutput @doc(description:"Set negotiable quote shipping method")
}

type Customer {
    negotiable_quote (
        id: ID!): NegotiableQuote @doc(description: "Get negotiable quote of a customer")

    negotiable_quotes(
        filter: NegotiableQuoteFilterInput,
        pageSize: Int = 20,
        currentPage: Int = 1
    ): [NegotiableQuote] @doc(description: "Get negotiable quotes of a customer")

}

type NegotiableQuote {
    quote_id: ID!  @doc(description: "Negotiable quote ID")
    items: [NegotiableQuoteItemInterface] @doc(description: "Negotiable quote item")
    attachements: [AttachmentContent] @doc(description: "Negotiable quote Attachements")
    comments: [NegotiableQuoteComment] @doc(description: "Negotiable quote comments")
    historyLog: [NegotiableQuoteHistoryLog] @doc(description: "Negotiable history log")
    prices: CartPrices! @doc(description: "Negotiable quote totals output")
    created_by: String @doc(description: "Negotiable quote creator")
    created_at: String @doc(description: "Timestamp indicating when the negotiable quote was created.")
    updated_at: String @doc(description: "Timestamp indicating when the negotiable quote was updated.")
    payment_info: NegotiableQuotePaymentInfo! @doc(description: "Negotiable quote payment info.")
    status: String @doc(description: "Negotiable quote status")
    available_shipping_methods: [ShippingMethodsOutput]! @doc(description: "Available shipping methods")
}

input NegotiableQuoteFilterInput {
    ids: FilterEqualTypeInput @doc(description: "Filter Customer Negotiable quotes with an negotiable quote ID or list of negotiable quote IDs")
    name: FilterMatchTypeInput @doc(description: "Filter by display name of the negotiable quote")
}

type NegotiableQuoteItemInterface {
    id: ID!
    quantity: Float!
    stock: Float!
    prices: NegotiableQuoteItemPrices
    product: ProductInterface!
}

type NegotiableQuoteItemPrices {
    price: Money!
    row_total: Money!
    row_total_including_tax: Money!
    discounts: [Discount] @doc(description:"An array of discounts to be applied to the quote item")
    total_item_discount: Money @doc(description:"The total of all discounts applied to the item")
}

type Discount @doc(description:"Defines an individual discount. A discount can be applied to the quote as a whole or to an item.") {
    amount: Money! @doc(description:"The amount of the discount")
    label: String! @doc(description:"A description of the discount")
}

type DefaultNegotiableQuoteItem implements NegotiableQuoteItemInterface
@doc(description: "Negotiable Quote Item Implementation for Simple and Virtual Products") {
    id: ID! @doc(description: "Unique Identifier of Negotiable Quote Item")
    product: ProductInterface!
    qty: Float! @doc(description:  "Quantity added")
    customizable_options: [SelectedCustomizableOption] @doc(description: "custom Option selected")
}

type DownloadableRequisitionListItem implements NegotiableQuoteItemInterface
@doc(description: "Negotiable Quote Item Implementation that for Downloadable Products") {
    id: ID! @doc(description: "Unique Identifier of Negotiable Quote Item")
    product: ProductInterface!
    qty: Float! @doc(description: "Quantity added")
    customizable_options: [SelectedCustomizableOption] @doc(description:  "custom Option selected")
    links: [DownloadableProductLinks] @doc(description: "DownloadableProductLinks defines characteristics of a downloadable product")
    samples: [DownloadableProductSamples] @doc(description:  "DownloadableProductSamples defines characteristics of a downloadable product")
}

type BundleRequisitionListItem implements NegotiableQuoteItemInterface
@doc(description: "Negotiable Quote Item Implementation that for Bundle Products") {
    id: ID! @doc(description: "Unique Identifier of Negotiable Quote Item")
    product: ProductInterface!
    qty: Float! @doc(description: "Quantity added")
    customizable_options: [SelectedCustomizableOption] @doc(description: "custom Option selected")
    bundle_options: [SelectedBundleOption]! @doc(description: "selected bundle options")
}

type ConfigurableRequisitionListItem implements NegotiableQuoteItemInterface
@doc(description: "Negotiable Quote Item Implementation that for Configurable Products") {
    id: ID! @doc(description:  "Unique Identifier of Negotiable Quote Item")
    product: ProductInterface!
    qty: Float! @doc(description: "Quantity added")
    customizable_options: [SelectedCustomizableOption] @doc(description: "custom Option selected")
    configurable_options: [SelectedConfigurableOption] @doc(description: "Configurable options selected")
}

type AttachmentContent @doc(description: "Negotiable quote attachment file") {
    base64_encoded_data: String!
    mime_type: String!
    name: String!
}

type NegotiableQuoteComment {
    id: ID!
    parent_id: String!
    author: String!
    text: String
    created_at: String
    attachments: [String]
}

type NegotiableQuoteHistoryLog {
    id: ID!
    author: String!
    action: String!
    comment: String
    status: String
    created_at: String
}

type NegotiableQuotePaymentInfo {
    payment_methods: [PaymentMethodsOutput]! @doc(description: "All list of payment options and totals")
    prices: CartPrices! @doc(description: "List of totals")
}

type PaymentMethodsOutput {
    code: String @doc(description: "Payment method code")
    title: String @doc(description: "Payment method title")
}

type CreateNegotiableQuoteOutput {
    negotiable_quote:NegotiableQuote!
}

type AddNegotiableQuoteCommentsOutput {
    negotiable_quote:NegotiableQuote!
}

type UpdateNegotiableQuoteItemsQuantityOutput {
    negotiable_quote:NegotiableQuote!
}

type RemoveNegotiableQuoteItemsOutput{
    negotiable_quote:NegotiableQuote!
}

input FileInput @doc(description: "The list of file attachment codes") {
    base64_encoded_data: String!
    mime_type: String!
    name: String!
}

input NegotiableQuoteShippingAddressInput {
    address: CartAddressInput
}

type ShippingMethodsOutput {
    carrier_code: String @doc(description: "Shipping carrier code")
    method_code: String @doc(description: "Shipping method code")
    carrier_title: String @doc(description: "Shiping carrier title")
    method_title: String @doc(description: "Shipping method title")
    amount: Money @doc(description: "Shipping amount")
    base_amount: Money @doc(description: "Shipping base amount")
    available: String @doc(description: "Shipping method availble")
    error_message: String @doc(description: "Shipping method error message")
    price_excl_tax: Money @doc(description: "Shipping method price with exclusive tax")
    price_incl_tax: Money @doc(description: "Shipping method price with inclusive tax")
}

type SetShippingMethodsOnNegotiableQuoteOutput {
    negotiable_quote: NegotiableQuote
}

 type SetShippingAddressesOnNegotiableQuoteOutput{
     negotiable_quote: NegotiableQuote
}