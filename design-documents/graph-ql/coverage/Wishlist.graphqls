type Mutation {
    createWishlist(name: String!): ID # Multiple wishlists Commerce functionality
    removeWishlist(id: ID!): Boolean # Commerce fucntionality - in Opens Source we assume customer always has one wishlist
    addProductsToWishlist(wishlistId: ID!, wishlistItems: [WishlistItemInput!]!): AddProductsToWishlistOutput
    removeProductsFromWishlist(wishlistId: ID!, wishlistItemsIds: [ID!]!): RemoveProductsFromWishlistOutput
    updateProductsInWishlist(wishlistId: ID!, wishlistItems: [WishlistItemUpdateInput!]!): UpdateProductsInWishlistOutput
}

type Customer {
    wishlist: Wishlist! @doc(description: "Customer wishlist") # Commerce will extend filed with required `id` argument `wishlists(ids: ID!)`
    wishlists: [Wishlist!]! @doc(description: "Customer multiple wishlists") # Multiple wishlists Commerce functionality
}

type Wishlist {
    id: ID
    items: [WishlistItemInterface]
    items_count: Int
    sharing_code: String
    updated_at: String
    name: String @doc(description: "Avaialble in Commerce edition only")
}

input WishlistItemUpdateInput {
    wishlist_item_id: ID
    quantity: Float
    selected_options: [String!]
    entered_options: [EnteredOptionInput!]
}

type AddProductsToWishlistOutput {
    wishlist: Wishlist!
}

type RemoveProductsFromWishlistOutput {
    wishlist: Wishlist!
}

type UpdateProductsInWishlistOutput {
    wishlist: Wishlist!
}

input WishlistItemInput {
    sku: String
    quantity: Float
    parent_sku: String,
    selected_options: [String!]
    entered_options: [EnteredOptionInput!]
}

interface WishlistItemInterface {
    id: ID
    qty: Float
    description: String
    added_at: String
    product: ProductInterface
    customizable_options: [SelectedCustomizableOption]
}

type SimpleWishlistItem implements WishlistItemInterface @doc(description: "Simple Wishlist Item") {
}

type VirtualWishlistItem implements WishlistItemInterface @doc(description: "Virtual Wishlist Item") {
}

type ConfigurableWishlistItem implements WishlistItemInterface {
    child_sku: String! @doc(description: "SKU of the simple product corresponding to a set of selected configurable options.")
    configurable_options: [SelectedConfigurableOption!]
}

type DownloadableWishlistItem implements WishlistItemInterface @doc(description: "Downloadable Wishlist Item") {
    links: [DownloadableProductLink] @doc(description: "An array containing information about the selected links")
    samples: [DownloadableProductSamples] @doc(description: "DownloadableProductSamples defines characteristics of a downloadable product")
}

type BundleWishlistItem implements WishlistItemInterface {
    bundle_options: [SelectedBundleOption!]
}

