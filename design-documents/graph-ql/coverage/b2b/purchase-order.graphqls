type Customer {
    purchase_orders(filter: PurchaseOrdersFilterInput, currentPage: Int = 1, pageSize: Int = 20): PurchaseOrders
}

input PurchaseOrdersFilterInput {
    status: PurchaseOrderStatus
    createdBy: FilterStringTypeInput
    createdDate: FilterRangeTypeInput
}

type PurchaseOrders {
    items: [PurchaseOrder]!
    page_info: SearchResultPageInfo
    total_count: Int
}

type PurchaseOrder {
    uid: ID! @doc(description: "Unique identifier for the purcahse order")
    number: String! @doc(description: "The purchase order number")
    order: CustomerOrder @doc(description: "The reference to the order placed based on the purchase order")
    purchase_order_date: String! @doc(description: "The date the purchase order was created")
    created_by: String! @doc(description: "The name of the user who created the purchase order")
    status: PurchaseOrderStatus! @doc(description: "The current status of the purcahse order")
    total: PurchaseOrderTotal @doc(description: "Contains details about the calculated totals for the purchase order")
    items: [PurchaseOrderItem] @doc(description: "An array containing the items in this purchase order")
    payment_methods: [PaymentMethod] @doc(description: "Payment details for the purchase order")
    shipping_address: CustomerAddress @doc(description: "The shipping address for the purchase order")
    billing_address: CustomerAddress @doc(description: "The billing address for the purchase order")
    carrier: String @doc(description: "The shipping carrier for the purchase order delivery")
    shipping_method: String @doc(description: "The delivery method for the purchase order")
}

type PurchaseOrderTotal @doc(description: "Contains details about the sales total amounts used to calculate the final price") {
    subtotal: Money! @doc(description: "The subtotal of the purchase order, excluding shipping, discounts, and taxes")
    discounts: [Discount] @doc(description: "The applied discounts to the purchase order")
    estimated_total_tax: Money! @doc(description: "The amount of tax applied to the purchase order")
    estimated_taxes: [TaxItem] @doc(description: "The purchase order tax details")
    grand_total: Money! @doc(description: "The final total amount, including shipping, discounts, and taxes")
    base_grand_total: Money! @doc(description: "The final base grand total amount in the base currency")
    total_shipping: Money! @doc(description: "The shipping amount for the order")
    shipping_handling: ShippingHandling @doc(description: "Contains details about the shipping and handling costs for the purchase purchase order")
}

type PurchaseOrderItem @doc(description: "Purchase order item details") {
    uid: ID! @doc(description: "The unique identifier of the purchase order item")
    product_name: String @doc(description: "The name of the base product")
    product_sku: String! @doc(description: "The SKU of the base product")
    product_url_key: String @doc(description: "URL key of the base product")
    product_type: String @doc(description: "The type of product, such as simple, configurable, or bundle")
    product_sale_price: Money! @doc(description: "The sale price of the base product, including selected options")
    discounts: [Discount] @doc(description: "The final discount information for the product")
    selected_options: [PurchaseOrderItemOption] @doc(description: "The selected options for the base product, such as color or size")
    entered_options: [PurchaseOrderItemOption] @doc(description: "The entered option for the base product, such as a logo or image")
    quantity: Float @doc(description: "The number of units for this item")
}

type PurchaseOrderItemOption @doc(description: "Represents purcahse order item options like selected or entered") {
    uid: ID! @doc(description: "The name of the option")
    value: String! @doc(description: "The value of the option")
}

enum PurchaseOrderStatus {
    PENDING
    APPROVAL_REQUIRED
    APPROVED
    ORDER_IN_PROGRESS
    ORDER_PLACED
    ORDER_FAILED
    REJECTED
    CANCELED
}
