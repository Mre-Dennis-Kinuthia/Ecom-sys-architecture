type Query {
    cart(input: CartQueryInput): CartQueryOutput
}

input CartQueryInput {
    cart_id: String!
}

type CartQueryOutput {
    cart: Cart
}

type Cart {
    id: ID! @doc(description: "The ID of the cart.")
    items: [CartItemInterface]
    applied_coupons: [AppliedCoupon] @doc(description:"An array of `AppliedCoupon` objects. Each object contains the `code` text attribute, which specifies the coupon code")
    email: String
    shipping_addresses: [ShippingCartAddress]!
    billing_address: BillingCartAddress
    available_payment_methods: [AvailablePaymentMethod] @doc(description: "Available payment methods")
    selected_payment_method: SelectedPaymentMethod
    prices: CartPrices
    total_quantity: Float!
    is_virtual: Boolean!
}

type AvailablePaymentMethod {
    code: String! @doc(description: "The payment method code")
    title: String! @doc(description: "The payment method title.")
}

type SelectedPaymentMethod {
    code: String! @doc(description: "The payment method code")
    title: String! @doc(description: "The payment method title.")
    purchase_order_number: String @doc(description: "The purchase order number.")
}

interface CartItemInterface @typeResolver(class: "Magento\\QuoteGraphQl\\Model\\Resolver\\CartItemTypeResolver") {
    id: String!
    quantity: Float!
    prices: CartItemPrices
    product: ProductInterface!
}

type SimpleCartItem implements CartItemInterface @doc(description: "Simple Cart Item") {
    customizable_options: [SelectedCustomizableOption]
}

type VirtualCartItem implements CartItemInterface @doc(description: "Virtual Cart Item") {
    customizable_options: [SelectedCustomizableOption]
}

type ConfigurableCartItem implements CartItemInterface {
    customizable_options: [SelectedCustomizableOption]!
    configurable_options: [SelectedConfigurableOption!]!
}

type SelectedConfigurableOption {
    id: Int!
    option_label: String!
    value_id: Int!
    value_label: String!
}

type DownloadableCartItem implements CartItemInterface @doc(description: "Downloadable Cart Item") {
    customizable_options: [SelectedCustomizableOption]
    links: [DownloadableProductLinks] @doc(description: "An array containing information about the links for the added to cart downloadable product")
    samples: [DownloadableProductSamples] @doc(description: "DownloadableProductSamples defines characteristics of a downloadable product")
}

type DownloadableProductLinks @doc(description: "DownloadableProductLinks defines characteristics of a downloadable product") {
    title: String @doc(description: "The display name of the link")
    sort_order: Int @doc(description: "A number indicating the sort order")
    price: Float @doc(description: "The price of the downloadable product")
    sample_url: String @doc(description: "URL to the downloadable sample")
}

type DownloadableProductSamples @doc(description: "DownloadableProductSamples defines characteristics of a downloadable product") {
    title: String @doc(description: "The display name of the sample")
    sort_order: Int @doc(description: "A number indicating the sort order")
    sample_url: String @doc(description: "URL to the downloadable sample")
}

type BundleCartItem implements CartItemInterface {
    customizable_options: [SelectedCustomizableOption]!
    bundle_options: [SelectedBundleOption!]!
}

type SelectedBundleOption {
    id: Int!
    label: String!
    type: String!
    values: [SelectedBundleOptionValue!]!
}

type SelectedBundleOptionValue {
    id: Int!
    label: String!
    quantity: Float!
    price: Float!
}

type SelectedCustomizableOption {
    id: Int!
    label: String!
    is_required: Boolean!
    values: [SelectedCustomizableOptionValue!]!
    sort_order: Int!
}

type SelectedCustomizableOptionValue {
    id: Int!
    label: String!
    value: String!
    price: CartItemSelectedOptionValuePrice!
}

type CartItemSelectedOptionValuePrice {
    value: Float!
    units: String!
    type: PriceTypeEnum!
}

enum PriceTypeEnum @doc(description: "This enumeration the price type.") {
    FIXED
    PERCENT
    DYNAMIC
}

type CheckoutCustomer {
    is_guest: Boolean!
    email: String!
    prefix: String
    first_name: String!
    last_name: String!
    middle_name: String
    suffix: String
    gender: GenderEnum
    date_of_birth: String
    vat_number: String # Do we need it at all on storefront? Do we need more details
}

enum GenderEnum {
    MALE
    FEMALE
}

type CheckoutPaymentMethod {
    code: String!
    label: String!
    balance: Money
    sort_order: Int
}

type CartGiftCard {
    code: String!
}
